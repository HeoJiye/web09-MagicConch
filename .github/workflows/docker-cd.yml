name: Dockerized CD

on:
  push:
    branches: ["dev", "BE/feature/#273-시그널-서버-배포-스크립트-작성"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate .env file
        run: |
          echo "DB_PORT=${{ secrets.DB_PORT }}" > .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "ACCESS_KEY_ID=${{ secrets.ACCESS_KEY_ID }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "X_NCP_CLOVASTUDIO_API_KEY=${{ secrets.X_NCP_CLOVASTUDIO_API_KEY }}" >> .env
          echo "X_NCP_APIGW_API_KEY=${{ secrets.X_NCP_APIGW_API_KEY }}" >> .env

      - name: Copy .env to Remote Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: ".env"
          target: "~/app/"

      - name: Generate SSL files
        run: |
          mkdir -p config/nginx/ssl/
          echo "${{ secrets.SSL_OPTIONS }}" > config/nginx/ssl/options-ssl-nginx.conf
          echo "${{ secrets.SSL_FULLCHAIN }}" > config/nginx/ssl/fullchain.pem
          echo "${{ secrets.SSL_PRIVKEY }}" > config/nginx/ssl/privkey.pem
          echo "${{ secrets.SSL_DHPARAMS }}" > config/nginx/ssl/ssl-dhparams.pem

      - name: Create target directory if not exists
        run: mkdir -p ~/app/config/nginx/ssl

      - name: Copy nginx configuration and SSL files to Remote Server
        run: |
          cp config/nginx/default.conf ~/app/config/nginx/default.conf
          cp config/nginx/ssl/options-ssl-nginx.conf ~/app/config/nginx/ssl/options-ssl-nginx.conf
          cp config/nginx/ssl/fullchain.pem ~/app/config/nginx/ssl/fullchain.pem
          cp config/nginx/ssl/privkey.pem ~/app/config/nginx/ssl/privkey.pem
          cp config/nginx/ssl/ssl-dhparams.pem ~/app/config/nginx/ssl/ssl-dhparams.pem

      - name: Build Docker Images
        run: |
          docker-compose build -t "${{ secrets.DOCKER_USERNAME }}/magicconch:${{ github.sha }}"
          cp docker-compose.yml docker-compose.${{ github.sha }}.yml

      - name: Copy Dockerfiles to Remote Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose.${{ github.sha }}.yml,Dockerfile.nginx,Dockerfile.was,Dockerfile.signal"
          target: "~/app/"
          overwrite: true

      - name: Remove local docker-compose copied file
        run: rm docker-compose.${{ github.sha }}.yml

      - name: Push Docker Images to Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      - run: docker-compose push

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Run Docker on Remote Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/app
            docker rm -f $(docker ps -qa)
            docker-compose -f docker-compose.${{ github.sha }}.yml pull
            docker-compose -f docker-compose.${{ github.sha }}.yml up -d
            while [ -z "$(docker ps -qaf "name=was")" ]; do
              sleep 5
            done
            sleep 60
            rm .env
